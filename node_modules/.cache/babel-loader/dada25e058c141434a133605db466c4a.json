{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Weather-Mood-Client\\\\src\\\\Components\\\\PostBar.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport WeatherMood from \"./WeatherMood\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PostBar(props) {\n  _s();\n\n  let today;\n  const [content, setContent] = useState(\"\");\n  const [id, setID] = useState(0);\n  const [moodList, setMoodList] = useState([]);\n  useEffect(() => {\n    axios.get(\"https://weather-mood-server.herokuapp.com/posts\").then(response => {\n      console.log(response);\n      setMoodList(response.data); //console.log(moodList);\n    });\n  }, []);\n\n  const postMood = () => {\n    if (content === \"\") return;\n    today = new Date();\n    axios.post(\"https://weather-mood-server.herokuapp.com/posts\", {\n      content: content,\n      year: today.getFullYear(),\n      month: today.getMonth() + 1,\n      day: today.getDate(),\n      hour: today.getHours(),\n      minute: today.getMinutes()\n    }, {\n      headers: {\n        accessToken: localStorage.getItem(\"accessToken\")\n      }\n    }).then(response => {\n      if (response.data.error) {\n        alert(\"Loggin to post!\");\n      } else {\n        setMoodList([...moodList, {\n          content: content,\n          id: id,\n          year: today.getFullYear(),\n          month: today.getMonth() + 1,\n          day: today.getDate(),\n          hour: today.getHours(),\n          minute: today.getMinutes(),\n          username: response.data.username\n        }]);\n        setContent(\"\");\n        setID(id + 1);\n      }\n    });\n  };\n\n  const deletePost = ID => {\n    axios.delete(`https://weather-mood-server.herokuapp.com/posts/${ID}`).then(() => {\n      console.log(\"remove the post\");\n      const newList = moodList;\n      const updateList = newList.filter(item => item.id !== ID);\n      setMoodList(updateList);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"PostBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarInput\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"PostBarContent\",\n        placeholder: \"What's on your mind?\",\n        value: content,\n        onChange: event => {\n          setContent(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"PostBarButton\",\n        onClick: postMood,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarSpace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PostBarOutput\",\n      children: moodList.map((moodList, index) => {\n        return /*#__PURE__*/_jsxDEV(WeatherMood, {\n          username: moodList.username,\n          currentUser: props.currentUser,\n          content: moodList.content,\n          id: moodList.id,\n          year: moodList.year,\n          month: moodList.month,\n          day: moodList.day,\n          hour: moodList.hour,\n          minute: moodList.minute,\n          deletePost: deletePost\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostBar, \"tkGp082fKLc7trR9x+P/T4mbuPU=\");\n\n_c = PostBar;\nexport default PostBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostBar\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Weather-Mood-Client/src/Components/PostBar.js"],"names":["WeatherMood","React","useState","useEffect","axios","PostBar","props","today","content","setContent","id","setID","moodList","setMoodList","get","then","response","console","log","data","postMood","Date","post","year","getFullYear","month","getMonth","day","getDate","hour","getHours","minute","getMinutes","headers","accessToken","localStorage","getItem","error","alert","username","deletePost","ID","delete","newList","updateList","filter","item","event","target","value","map","index","currentUser"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport WeatherMood from \"./WeatherMood\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction PostBar(props) {\r\n  let today;\r\n\r\n  const [content, setContent] = useState(\"\");\r\n  const [id, setID] = useState(0);\r\n  const [moodList, setMoodList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://weather-mood-server.herokuapp.com/posts\")\r\n      .then((response) => {\r\n        console.log(response);\r\n        setMoodList(response.data);\r\n        //console.log(moodList);\r\n      });\r\n  }, []);\r\n\r\n  const postMood = () => {\r\n    if (content === \"\") return;\r\n    today = new Date();\r\n\r\n    axios\r\n      .post(\r\n        \"https://weather-mood-server.herokuapp.com/posts\",\r\n        {\r\n          content: content,\r\n          year: today.getFullYear(),\r\n          month: today.getMonth() + 1,\r\n          day: today.getDate(),\r\n          hour: today.getHours(),\r\n          minute: today.getMinutes(),\r\n        },\r\n        {\r\n          headers: {\r\n            accessToken: localStorage.getItem(\"accessToken\"),\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.error) {\r\n          alert(\"Loggin to post!\");\r\n        } else {\r\n          setMoodList([\r\n            ...moodList,\r\n            {\r\n              content: content,\r\n              id: id,\r\n              year: today.getFullYear(),\r\n              month: today.getMonth() + 1,\r\n              day: today.getDate(),\r\n              hour: today.getHours(),\r\n              minute: today.getMinutes(),\r\n              username: response.data.username,\r\n            },\r\n          ]);\r\n\r\n          setContent(\"\");\r\n          setID(id + 1);\r\n        }\r\n      });\r\n  };\r\n\r\n  const deletePost = (ID) => {\r\n    axios\r\n      .delete(`https://weather-mood-server.herokuapp.com/posts/${ID}`)\r\n      .then(() => {\r\n        console.log(\"remove the post\");\r\n        const newList = moodList;\r\n        const updateList = newList.filter((item) => item.id !== ID);\r\n\r\n        setMoodList(updateList);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"PostBar\">\r\n      <div className=\"PostBarInput\">\r\n        <textarea\r\n          className=\"PostBarContent\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={content}\r\n          onChange={(event) => {\r\n            setContent(event.target.value);\r\n          }}\r\n        ></textarea>\r\n        <button className=\"PostBarButton\" onClick={postMood}>\r\n          Post\r\n        </button>\r\n      </div>\r\n      <div className=\"PostBarSpace\"></div>\r\n      <div className=\"PostBarOutput\">\r\n        {moodList.map((moodList, index) => {\r\n          return (\r\n            <WeatherMood\r\n              username={moodList.username}\r\n              currentUser={props.currentUser}\r\n              content={moodList.content}\r\n              id={moodList.id}\r\n              year={moodList.year}\r\n              month={moodList.month}\r\n              day={moodList.day}\r\n              hour={moodList.hour}\r\n              minute={moodList.minute}\r\n              key={index}\r\n              deletePost={deletePost}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostBar;\r\n"]},"metadata":{},"sourceType":"module"}